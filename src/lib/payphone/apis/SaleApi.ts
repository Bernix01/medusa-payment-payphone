/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PayPhoneButtonBusinessModelsSaleGetModel,
  PayPhoneButtonBusinessModelsSaleModel,
  PayPhoneButtonBusinessViewModelsSaleRequestModel,
} from '../models/index';
import {
    PayPhoneButtonBusinessModelsSaleGetModelFromJSON,
    PayPhoneButtonBusinessModelsSaleGetModelToJSON,
    PayPhoneButtonBusinessModelsSaleModelFromJSON,
    PayPhoneButtonBusinessModelsSaleModelToJSON,
    PayPhoneButtonBusinessViewModelsSaleRequestModelFromJSON,
    PayPhoneButtonBusinessViewModelsSaleRequestModelToJSON,
} from '../models/index';

export interface SaleGetRequest {
    id: number;
}

export interface SaleGetByClientRequest {
    clientId: string;
}

export interface SaleSetRequest {
    model: PayPhoneButtonBusinessViewModelsSaleRequestModel;
}

/**
 * 
 */
export class SaleApi extends runtime.BaseAPI {

    /**
     * Get transaction by id
     */
    async saleGetRaw(requestParameters: SaleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayPhoneButtonBusinessModelsSaleGetModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Sale/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayPhoneButtonBusinessModelsSaleGetModelFromJSON(jsonValue));
    }

    /**
     * Get transaction by id
     */
    async saleGet(requestParameters: SaleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayPhoneButtonBusinessModelsSaleGetModel> {
        const response = await this.saleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transaction by client transaction id
     */
    async saleGetByClientRaw(requestParameters: SaleGetByClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PayPhoneButtonBusinessModelsSaleGetModel>>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling saleGetByClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Sale/client/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PayPhoneButtonBusinessModelsSaleGetModelFromJSON));
    }

    /**
     * Get transaction by client transaction id
     */
    async saleGetByClient(requestParameters: SaleGetByClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PayPhoneButtonBusinessModelsSaleGetModel>> {
        const response = await this.saleGetByClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create transaction and send notification to customer
     */
    async saleSetRaw(requestParameters: SaleSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayPhoneButtonBusinessModelsSaleModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling saleSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Sale`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayPhoneButtonBusinessViewModelsSaleRequestModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayPhoneButtonBusinessModelsSaleModelFromJSON(jsonValue));
    }

    /**
     * Create transaction and send notification to customer
     */
    async saleSet(requestParameters: SaleSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayPhoneButtonBusinessModelsSaleModel> {
        const response = await this.saleSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PayPhoneButtonBusinessModelsPrepareSaleModel,
  PayPhoneButtonBusinessModelsPrepareSaleRequestModel,
  PayPhoneButtonBusinessModelsSaleGetModelB,
  PayPhonePaymentButtonModelsConfirmSaleRequestModel,
} from '../models/index';
import {
    PayPhoneButtonBusinessModelsPrepareSaleModelFromJSON,
    PayPhoneButtonBusinessModelsPrepareSaleModelToJSON,
    PayPhoneButtonBusinessModelsPrepareSaleRequestModelFromJSON,
    PayPhoneButtonBusinessModelsPrepareSaleRequestModelToJSON,
    PayPhoneButtonBusinessModelsSaleGetModelBFromJSON,
    PayPhoneButtonBusinessModelsSaleGetModelBToJSON,
    PayPhonePaymentButtonModelsConfirmSaleRequestModelFromJSON,
    PayPhonePaymentButtonModelsConfirmSaleRequestModelToJSON,
} from '../models/index';

export interface ButtonConfirmV2Request {
    model: PayPhonePaymentButtonModelsConfirmSaleRequestModel;
}

export interface ButtonPrepareRequest {
    model: PayPhoneButtonBusinessModelsPrepareSaleRequestModel;
}

/**
 * 
 */
export class ButtonApi extends runtime.BaseAPI {

    /**
     * Post: Confirm the transaction receive from payment button
     */
    async buttonConfirmV2Raw(requestParameters: ButtonConfirmV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayPhoneButtonBusinessModelsSaleGetModelB>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling buttonConfirmV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/button/V2/Confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayPhonePaymentButtonModelsConfirmSaleRequestModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayPhoneButtonBusinessModelsSaleGetModelBFromJSON(jsonValue));
    }

    /**
     * Post: Confirm the transaction receive from payment button
     */
    async buttonConfirmV2(requestParameters: ButtonConfirmV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayPhoneButtonBusinessModelsSaleGetModelB> {
        const response = await this.buttonConfirmV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST: Prepare the transaction for consume later by payment button
     */
    async buttonPrepareRaw(requestParameters: ButtonPrepareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayPhoneButtonBusinessModelsPrepareSaleModel>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling buttonPrepare.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/button/Prepare`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayPhoneButtonBusinessModelsPrepareSaleRequestModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayPhoneButtonBusinessModelsPrepareSaleModelFromJSON(jsonValue));
    }

    /**
     * POST: Prepare the transaction for consume later by payment button
     */
    async buttonPrepare(requestParameters: ButtonPrepareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayPhoneButtonBusinessModelsPrepareSaleModel> {
        const response = await this.buttonPrepareRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

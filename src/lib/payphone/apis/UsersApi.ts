/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PayPhoneButtonBusinessModelsUserModel,
} from '../models/index';
import {
    PayPhoneButtonBusinessModelsUserModelFromJSON,
    PayPhoneButtonBusinessModelsUserModelToJSON,
} from '../models/index';

export interface UsersCheckUserRequest {
    number: string;
    prefix: number;
}

export interface UsersGetRequest {
    number: string;
    prefix: number;
}

export interface UsersGetByNicknameRequest {
    number: string;
    prefix: number;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Check active users
     */
    async usersCheckUserRaw(requestParameters: UsersCheckUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.number === null || requestParameters.number === undefined) {
            throw new runtime.RequiredError('number','Required parameter requestParameters.number was null or undefined when calling usersCheckUser.');
        }

        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling usersCheckUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/check/{number}/region/{prefix}`.replace(`{${"number"}}`, encodeURIComponent(String(requestParameters.number))).replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check active users
     */
    async usersCheckUser(requestParameters: UsersCheckUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.usersCheckUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user by phone number
     */
    async usersGetRaw(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayPhoneButtonBusinessModelsUserModel>> {
        if (requestParameters.number === null || requestParameters.number === undefined) {
            throw new runtime.RequiredError('number','Required parameter requestParameters.number was null or undefined when calling usersGet.');
        }

        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling usersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/{number}/region/{prefix}`.replace(`{${"number"}}`, encodeURIComponent(String(requestParameters.number))).replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayPhoneButtonBusinessModelsUserModelFromJSON(jsonValue));
    }

    /**
     * Get user by phone number
     */
    async usersGet(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayPhoneButtonBusinessModelsUserModel> {
        const response = await this.usersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user by nickname
     */
    async usersGetByNicknameRaw(requestParameters: UsersGetByNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayPhoneButtonBusinessModelsUserModel>> {
        if (requestParameters.number === null || requestParameters.number === undefined) {
            throw new runtime.RequiredError('number','Required parameter requestParameters.number was null or undefined when calling usersGetByNickname.');
        }

        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling usersGetByNickname.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Users/nickname/{number}/region/{prefix}`.replace(`{${"number"}}`, encodeURIComponent(String(requestParameters.number))).replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayPhoneButtonBusinessModelsUserModelFromJSON(jsonValue));
    }

    /**
     * Get user by nickname
     */
    async usersGetByNickname(requestParameters: UsersGetByNicknameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayPhoneButtonBusinessModelsUserModel> {
        const response = await this.usersGetByNicknameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * PayPhone API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AnnulApi", () => {
  let instance: api.AnnulApi
  beforeEach(function() {
    instance = new api.AnnulApi(config)
  });

  test("annulGet", () => {
    const id: number = 789
    return expect(instance.annulGet(id, {})).resolves.toBe(null)
  })
  test("annulGetByClientId", () => {
    const clientId: string = "clientId_example"
    return expect(instance.annulGetByClientId(clientId, {})).resolves.toBe(null)
  })
  test("annulSet", () => {
    const body: api.PayPhonePaymentButtonModelsCancellationSetRequestModel = undefined
    return expect(instance.annulSet(body, {})).resolves.toBe(null)
  })
  test("annulSetByClientId", () => {
    const body: api.PayPhonePaymentButtonModelsCancellationSetByClientRequestModel = undefined
    return expect(instance.annulSetByClientId(body, {})).resolves.toBe(null)
  })
})

describe("ButtonApi", () => {
  let instance: api.ButtonApi
  beforeEach(function() {
    instance = new api.ButtonApi(config)
  });

  test("buttonConfirmV2", () => {
    const body: api.PayPhonePaymentButtonModelsConfirmSaleRequestModel = undefined
    return expect(instance.buttonConfirmV2(body, {})).resolves.toBe(null)
  })
  test("buttonPrepare", () => {
    const body: api.PayPhoneButtonBusinessModelsPrepareSaleRequestModel = undefined
    return expect(instance.buttonPrepare(body, {})).resolves.toBe(null)
  })
})

describe("CancelApi", () => {
  let instance: api.CancelApi
  beforeEach(function() {
    instance = new api.CancelApi(config)
  });

  test("cancelSet", () => {
    const body: api.PayPhonePaymentButtonModelsCancellationSetRequestModel = undefined
    return expect(instance.cancelSet(body, {})).resolves.toBe(null)
  })
  test("cancelSetByClient", () => {
    const body: api.PayPhonePaymentButtonModelsCancellationSetByClientRequestModel = undefined
    return expect(instance.cancelSetByClient(body, {})).resolves.toBe(null)
  })
})

describe("LinksApi", () => {
  let instance: api.LinksApi
  beforeEach(function() {
    instance = new api.LinksApi(config)
  });

  test("linksPost", () => {
    const body: api.PayPhonePaymentButtonModelsLinkViewModel = undefined
    return expect(instance.linksPost(body, {})).resolves.toBe(null)
  })
})

describe("RegionsApi", () => {
  let instance: api.RegionsApi
  beforeEach(function() {
    instance = new api.RegionsApi(config)
  });

  test("regionsGet", () => {
    return expect(instance.regionsGet({})).resolves.toBe(null)
  })
})

describe("ReverseApi", () => {
  let instance: api.ReverseApi
  beforeEach(function() {
    instance = new api.ReverseApi(config)
  });

  test("reverseSet", () => {
    const body: api.PayPhonePaymentButtonModelsCancellationSetRequestModel = undefined
    return expect(instance.reverseSet(body, {})).resolves.toBe(null)
  })
  test("reverseSetByClientId", () => {
    const body: api.PayPhonePaymentButtonModelsCancellationSetByClientRequestModel = undefined
    return expect(instance.reverseSetByClientId(body, {})).resolves.toBe(null)
  })
})

describe("SaleApi", () => {
  let instance: api.SaleApi
  beforeEach(function() {
    instance = new api.SaleApi(config)
  });

  test("saleGet", () => {
    const id: number = 789
    return expect(instance.saleGet(id, {})).resolves.toBe(null)
  })
  test("saleGetByClient", () => {
    const clientId: string = "clientId_example"
    return expect(instance.saleGetByClient(clientId, {})).resolves.toBe(null)
  })
  test("saleSet", () => {
    const body: api.PayPhoneButtonBusinessViewModelsSaleRequestModel = undefined
    return expect(instance.saleSet(body, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("usersCheckUser", () => {
    const number: string = "number_example"
    const prefix: number = 56
    return expect(instance.usersCheckUser(number, prefix, {})).resolves.toBe(null)
  })
  test("usersGet", () => {
    const number: string = "number_example"
    const prefix: number = 56
    return expect(instance.usersGet(number, prefix, {})).resolves.toBe(null)
  })
  test("usersGetByNickname", () => {
    const number: string = "number_example"
    const prefix: number = 56
    return expect(instance.usersGetByNickname(number, prefix, {})).resolves.toBe(null)
  })
})


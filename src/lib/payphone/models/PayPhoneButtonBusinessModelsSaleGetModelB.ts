/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PayPhoneButtonBusinessModelsTaxModel } from './PayPhoneButtonBusinessModelsTaxModel';
import {
    PayPhoneButtonBusinessModelsTaxModelFromJSON,
    PayPhoneButtonBusinessModelsTaxModelFromJSONTyped,
    PayPhoneButtonBusinessModelsTaxModelToJSON,
} from './PayPhoneButtonBusinessModelsTaxModel';

/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsSaleGetModelB
 */
export interface PayPhoneButtonBusinessModelsSaleGetModelB {
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    cardType?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    clientUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    processor?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    bin?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    lastDigits?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    deferredCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    deferredMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    deferred?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    cardBrandCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    cardBrand?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    clientTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    phoneNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    transactionStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    authorizationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    messageCode?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    transactionId?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    document?: string;
    /**
     * 
     * @type {Array<PayPhoneButtonBusinessModelsTaxModel>}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    taxes?: Array<PayPhoneButtonBusinessModelsTaxModel>;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    optionalParameter1?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    optionalParameter2?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    optionalParameter3?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    optionalParameter4?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    storeName?: string;
    /**
     * 
     * @type {Date}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    regionIso?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    transactionType?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    recap?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    reference?: string;
}

/**
 * Check if a given object implements the PayPhoneButtonBusinessModelsSaleGetModelB interface.
 */
export function instanceOfPayPhoneButtonBusinessModelsSaleGetModelB(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PayPhoneButtonBusinessModelsSaleGetModelBFromJSON(json: any): PayPhoneButtonBusinessModelsSaleGetModelB {
    return PayPhoneButtonBusinessModelsSaleGetModelBFromJSONTyped(json, false);
}

export function PayPhoneButtonBusinessModelsSaleGetModelBFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayPhoneButtonBusinessModelsSaleGetModelB {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': !exists(json, 'email') ? undefined : json['email'],
        'cardType': !exists(json, 'cardType') ? undefined : json['cardType'],
        'clientUserId': !exists(json, 'clientUserId') ? undefined : json['clientUserId'],
        'processor': !exists(json, 'processor') ? undefined : json['processor'],
        'bin': !exists(json, 'bin') ? undefined : json['bin'],
        'lastDigits': !exists(json, 'lastDigits') ? undefined : json['lastDigits'],
        'deferredCode': !exists(json, 'deferredCode') ? undefined : json['deferredCode'],
        'deferredMessage': !exists(json, 'deferredMessage') ? undefined : json['deferredMessage'],
        'deferred': !exists(json, 'deferred') ? undefined : json['deferred'],
        'cardBrandCode': !exists(json, 'cardBrandCode') ? undefined : json['cardBrandCode'],
        'cardBrand': !exists(json, 'cardBrand') ? undefined : json['cardBrand'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'clientTransactionId': !exists(json, 'clientTransactionId') ? undefined : json['clientTransactionId'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'transactionStatus': !exists(json, 'transactionStatus') ? undefined : json['transactionStatus'],
        'authorizationCode': !exists(json, 'authorizationCode') ? undefined : json['authorizationCode'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'messageCode': !exists(json, 'messageCode') ? undefined : json['messageCode'],
        'transactionId': !exists(json, 'transactionId') ? undefined : json['transactionId'],
        'document': !exists(json, 'document') ? undefined : json['document'],
        'taxes': !exists(json, 'taxes') ? undefined : ((json['taxes'] as Array<any>).map(PayPhoneButtonBusinessModelsTaxModelFromJSON)),
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'optionalParameter1': !exists(json, 'optionalParameter1') ? undefined : json['optionalParameter1'],
        'optionalParameter2': !exists(json, 'optionalParameter2') ? undefined : json['optionalParameter2'],
        'optionalParameter3': !exists(json, 'optionalParameter3') ? undefined : json['optionalParameter3'],
        'optionalParameter4': !exists(json, 'optionalParameter4') ? undefined : json['optionalParameter4'],
        'storeName': !exists(json, 'storeName') ? undefined : json['storeName'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'regionIso': !exists(json, 'regionIso') ? undefined : json['regionIso'],
        'transactionType': !exists(json, 'transactionType') ? undefined : json['transactionType'],
        'recap': !exists(json, 'recap') ? undefined : json['recap'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
    };
}

export function PayPhoneButtonBusinessModelsSaleGetModelBToJSON(value?: PayPhoneButtonBusinessModelsSaleGetModelB | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'cardType': value.cardType,
        'clientUserId': value.clientUserId,
        'processor': value.processor,
        'bin': value.bin,
        'lastDigits': value.lastDigits,
        'deferredCode': value.deferredCode,
        'deferredMessage': value.deferredMessage,
        'deferred': value.deferred,
        'cardBrandCode': value.cardBrandCode,
        'cardBrand': value.cardBrand,
        'amount': value.amount,
        'clientTransactionId': value.clientTransactionId,
        'phoneNumber': value.phoneNumber,
        'statusCode': value.statusCode,
        'transactionStatus': value.transactionStatus,
        'authorizationCode': value.authorizationCode,
        'message': value.message,
        'messageCode': value.messageCode,
        'transactionId': value.transactionId,
        'document': value.document,
        'taxes': value.taxes === undefined ? undefined : ((value.taxes as Array<any>).map(PayPhoneButtonBusinessModelsTaxModelToJSON)),
        'currency': value.currency,
        'optionalParameter1': value.optionalParameter1,
        'optionalParameter2': value.optionalParameter2,
        'optionalParameter3': value.optionalParameter3,
        'optionalParameter4': value.optionalParameter4,
        'storeName': value.storeName,
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'regionIso': value.regionIso,
        'transactionType': value.transactionType,
        'recap': value.recap,
        'reference': value.reference,
    };
}


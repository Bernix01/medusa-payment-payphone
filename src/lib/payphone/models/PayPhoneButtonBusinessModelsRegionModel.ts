/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsRegionModel
 */
export interface PayPhoneButtonBusinessModelsRegionModel {
    /**
     * Region name
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsRegionModel
     */
    name?: string;
    /**
     * Phone region prefix number
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsRegionModel
     */
    prefixNumber?: number;
    /**
     * ISO code like "EC"
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsRegionModel
     */
    iso?: string;
}

/**
 * Check if a given object implements the PayPhoneButtonBusinessModelsRegionModel interface.
 */
export function instanceOfPayPhoneButtonBusinessModelsRegionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PayPhoneButtonBusinessModelsRegionModelFromJSON(json: any): PayPhoneButtonBusinessModelsRegionModel {
    return PayPhoneButtonBusinessModelsRegionModelFromJSONTyped(json, false);
}

export function PayPhoneButtonBusinessModelsRegionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayPhoneButtonBusinessModelsRegionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'prefixNumber': !exists(json, 'prefixNumber') ? undefined : json['prefixNumber'],
        'iso': !exists(json, 'iso') ? undefined : json['iso'],
    };
}

export function PayPhoneButtonBusinessModelsRegionModelToJSON(value?: PayPhoneButtonBusinessModelsRegionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'prefixNumber': value.prefixNumber,
        'iso': value.iso,
    };
}


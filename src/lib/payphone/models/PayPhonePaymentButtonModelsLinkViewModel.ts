/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PayPhonePaymentButtonModelsLinkViewModel
 */
export interface PayPhonePaymentButtonModelsLinkViewModel {
    /**
     * Transaction amount
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    amount: number;
    /**
     * Transaction tax
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    tax?: number;
    /**
     * Transaction amount with tax
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    amountWithTax?: number;
    /**
     * Trasnaction amount without tax
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    amountWithoutTax?: number;
    /**
     * Service amount
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    service?: number;
    /**
     * Tip amount
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    tip?: number;
    /**
     * Currency to charge in ISO 4217 (USD)
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    currency: string;
    /**
     * Reference describing the transaction MAX(50 characters)
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    reference?: string;
    /**
     * Transaction identifier Max(50)
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    clientTransactionId: string;
    /**
     * Store identifier. It can be found in the developer's console
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    storeId?: string;
    /**
     * (Optional) Additional parameters, accept a json
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    additionalData?: string;
    /**
     * The link only can pay one time, the pay must be approved
     * @type {boolean}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    oneTime?: boolean;
    /**
     * When the link is no longer available in hours
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    expireIn?: number;
    /**
     * Si aplica monto editable
     * @type {boolean}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    isAmountEditable?: boolean;
    /**
     * Si es masivo o no
     * @type {boolean}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    isMassive?: boolean;
}

/**
 * Check if a given object implements the PayPhonePaymentButtonModelsLinkViewModel interface.
 */
export function instanceOfPayPhonePaymentButtonModelsLinkViewModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "clientTransactionId" in value;

    return isInstance;
}

export function PayPhonePaymentButtonModelsLinkViewModelFromJSON(json: any): PayPhonePaymentButtonModelsLinkViewModel {
    return PayPhonePaymentButtonModelsLinkViewModelFromJSONTyped(json, false);
}

export function PayPhonePaymentButtonModelsLinkViewModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayPhonePaymentButtonModelsLinkViewModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'tax': !exists(json, 'tax') ? undefined : json['tax'],
        'amountWithTax': !exists(json, 'amountWithTax') ? undefined : json['amountWithTax'],
        'amountWithoutTax': !exists(json, 'amountWithoutTax') ? undefined : json['amountWithoutTax'],
        'service': !exists(json, 'service') ? undefined : json['service'],
        'tip': !exists(json, 'tip') ? undefined : json['tip'],
        'currency': json['currency'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'clientTransactionId': json['clientTransactionId'],
        'storeId': !exists(json, 'storeId') ? undefined : json['storeId'],
        'additionalData': !exists(json, 'additionalData') ? undefined : json['additionalData'],
        'oneTime': !exists(json, 'oneTime') ? undefined : json['oneTime'],
        'expireIn': !exists(json, 'expireIn') ? undefined : json['expireIn'],
        'isAmountEditable': !exists(json, 'isAmountEditable') ? undefined : json['isAmountEditable'],
        'isMassive': !exists(json, 'isMassive') ? undefined : json['isMassive'],
    };
}

export function PayPhonePaymentButtonModelsLinkViewModelToJSON(value?: PayPhonePaymentButtonModelsLinkViewModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'tax': value.tax,
        'amountWithTax': value.amountWithTax,
        'amountWithoutTax': value.amountWithoutTax,
        'service': value.service,
        'tip': value.tip,
        'currency': value.currency,
        'reference': value.reference,
        'clientTransactionId': value.clientTransactionId,
        'storeId': value.storeId,
        'additionalData': value.additionalData,
        'oneTime': value.oneTime,
        'expireIn': value.expireIn,
        'isAmountEditable': value.isAmountEditable,
        'isMassive': value.isMassive,
    };
}


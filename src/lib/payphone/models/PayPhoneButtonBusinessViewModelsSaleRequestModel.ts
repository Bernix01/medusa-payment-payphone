/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PayPhoneButtonBusinessModelsOrder } from './PayPhoneButtonBusinessModelsOrder';
import {
    PayPhoneButtonBusinessModelsOrderFromJSON,
    PayPhoneButtonBusinessModelsOrderFromJSONTyped,
    PayPhoneButtonBusinessModelsOrderToJSON,
} from './PayPhoneButtonBusinessModelsOrder';

/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessViewModelsSaleRequestModel
 */
export interface PayPhoneButtonBusinessViewModelsSaleRequestModel {
    /**
     * The user nickname optional if ChargeByNickName is false
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    nickName?: string;
    /**
     * If true the user find by nickname. Note the nickname in this case is required
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    chargeByNickName?: boolean;
    /**
     * User phone number optional if ChargeByNickName is true
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    phoneNumber?: string;
    /**
     * phone country code
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    countryCode: string;
    /**
     * Store time zone
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    timeZone?: number;
    /**
     * Store Latitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    lat?: string;
    /**
     * Store longitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    lng?: string;
    /**
     * (Optional) Identifier of the user generated in the client application
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    clientUserId?: string;
    /**
     * (Optional) Field to send a reference of your purchase
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    reference?: string;
    /**
     * Optional parameter 1
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    optionalParameter1?: string;
    /**
     * Optional parameter 2
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    optionalParameter2?: string;
    /**
     * Optional parameter 3
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    optionalParameter3?: string;
    /**
     * (Optional) Deferred type example CF02010900
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    deferredType?: string;
    /**
     * Response Url where our server send the payment result
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    responseUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    maxiDolar?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    amountWithTax?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    amountWithoutTax?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    manualTax?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    tax?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    service?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    tip?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    clientTransactionId: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    storeId?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    terminalId?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    currency?: string;
    /**
     * 
     * @type {PayPhoneButtonBusinessModelsOrder}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    order?: PayPhoneButtonBusinessModelsOrder;
}

/**
 * Check if a given object implements the PayPhoneButtonBusinessViewModelsSaleRequestModel interface.
 */
export function instanceOfPayPhoneButtonBusinessViewModelsSaleRequestModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "countryCode" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "clientTransactionId" in value;

    return isInstance;
}

export function PayPhoneButtonBusinessViewModelsSaleRequestModelFromJSON(json: any): PayPhoneButtonBusinessViewModelsSaleRequestModel {
    return PayPhoneButtonBusinessViewModelsSaleRequestModelFromJSONTyped(json, false);
}

export function PayPhoneButtonBusinessViewModelsSaleRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayPhoneButtonBusinessViewModelsSaleRequestModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nickName': !exists(json, 'nickName') ? undefined : json['nickName'],
        'chargeByNickName': !exists(json, 'chargeByNickName') ? undefined : json['chargeByNickName'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'countryCode': json['countryCode'],
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'lng': !exists(json, 'lng') ? undefined : json['lng'],
        'clientUserId': !exists(json, 'clientUserId') ? undefined : json['clientUserId'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'optionalParameter1': !exists(json, 'optionalParameter1') ? undefined : json['optionalParameter1'],
        'optionalParameter2': !exists(json, 'optionalParameter2') ? undefined : json['optionalParameter2'],
        'optionalParameter3': !exists(json, 'optionalParameter3') ? undefined : json['optionalParameter3'],
        'deferredType': !exists(json, 'deferredType') ? undefined : json['deferredType'],
        'responseUrl': !exists(json, 'responseUrl') ? undefined : json['responseUrl'],
        'maxiDolar': !exists(json, 'maxiDolar') ? undefined : json['maxiDolar'],
        'amount': json['amount'],
        'amountWithTax': !exists(json, 'amountWithTax') ? undefined : json['amountWithTax'],
        'amountWithoutTax': !exists(json, 'amountWithoutTax') ? undefined : json['amountWithoutTax'],
        'manualTax': !exists(json, 'manualTax') ? undefined : json['manualTax'],
        'tax': !exists(json, 'tax') ? undefined : json['tax'],
        'service': !exists(json, 'service') ? undefined : json['service'],
        'tip': !exists(json, 'tip') ? undefined : json['tip'],
        'clientTransactionId': json['clientTransactionId'],
        'storeId': !exists(json, 'storeId') ? undefined : json['storeId'],
        'terminalId': !exists(json, 'terminalId') ? undefined : json['terminalId'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'order': !exists(json, 'order') ? undefined : PayPhoneButtonBusinessModelsOrderFromJSON(json['order']),
    };
}

export function PayPhoneButtonBusinessViewModelsSaleRequestModelToJSON(value?: PayPhoneButtonBusinessViewModelsSaleRequestModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nickName': value.nickName,
        'chargeByNickName': value.chargeByNickName,
        'phoneNumber': value.phoneNumber,
        'countryCode': value.countryCode,
        'timeZone': value.timeZone,
        'lat': value.lat,
        'lng': value.lng,
        'clientUserId': value.clientUserId,
        'reference': value.reference,
        'optionalParameter1': value.optionalParameter1,
        'optionalParameter2': value.optionalParameter2,
        'optionalParameter3': value.optionalParameter3,
        'deferredType': value.deferredType,
        'responseUrl': value.responseUrl,
        'maxiDolar': value.maxiDolar,
        'amount': value.amount,
        'amountWithTax': value.amountWithTax,
        'amountWithoutTax': value.amountWithoutTax,
        'manualTax': value.manualTax,
        'tax': value.tax,
        'service': value.service,
        'tip': value.tip,
        'clientTransactionId': value.clientTransactionId,
        'storeId': value.storeId,
        'terminalId': value.terminalId,
        'currency': value.currency,
        'order': PayPhoneButtonBusinessModelsOrderToJSON(value.order),
    };
}


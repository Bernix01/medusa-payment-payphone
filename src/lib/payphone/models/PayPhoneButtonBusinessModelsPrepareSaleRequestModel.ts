/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PayPhoneButtonBusinessModelsOrder } from './PayPhoneButtonBusinessModelsOrder';
import {
    PayPhoneButtonBusinessModelsOrderFromJSON,
    PayPhoneButtonBusinessModelsOrderFromJSONTyped,
    PayPhoneButtonBusinessModelsOrderToJSON,
} from './PayPhoneButtonBusinessModelsOrder';

/**
 * Model for accept the new sale request
 * @export
 * @interface PayPhoneButtonBusinessModelsPrepareSaleRequestModel
 */
export interface PayPhoneButtonBusinessModelsPrepareSaleRequestModel {
    /**
     * Response url for this transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    responseUrl: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    transactionSummaryUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    timeZone?: number;
    /**
     * Store Latitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    lat?: string;
    /**
     * Store longitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    lng?: string;
    /**
     * Language for this transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    lang?: string;
    /**
     * Reference for this transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    reference?: string;
    /**
     * User Phone number (optional)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    phoneNumber?: string;
    /**
     * User email (optional)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    email?: string;
    /**
     * Parameter opcional No 3 (Optional)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    optionalParameter?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    documentId?: string;
    /**
     * Url execute when user click in cancel payment before complete the payment process
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    cancellationUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    amountWithTax?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    amountWithoutTax?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    manualTax?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    tax?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    service?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    tip?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    clientTransactionId: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    storeId?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    terminalId?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    currency?: string;
    /**
     * 
     * @type {PayPhoneButtonBusinessModelsOrder}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    order?: PayPhoneButtonBusinessModelsOrder;
}

/**
 * Check if a given object implements the PayPhoneButtonBusinessModelsPrepareSaleRequestModel interface.
 */
export function instanceOfPayPhoneButtonBusinessModelsPrepareSaleRequestModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "responseUrl" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "clientTransactionId" in value;

    return isInstance;
}

export function PayPhoneButtonBusinessModelsPrepareSaleRequestModelFromJSON(json: any): PayPhoneButtonBusinessModelsPrepareSaleRequestModel {
    return PayPhoneButtonBusinessModelsPrepareSaleRequestModelFromJSONTyped(json, false);
}

export function PayPhoneButtonBusinessModelsPrepareSaleRequestModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayPhoneButtonBusinessModelsPrepareSaleRequestModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'responseUrl': json['responseUrl'],
        'transactionSummaryUrl': !exists(json, 'transactionSummaryUrl') ? undefined : json['transactionSummaryUrl'],
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'lng': !exists(json, 'lng') ? undefined : json['lng'],
        'lang': !exists(json, 'lang') ? undefined : json['lang'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'optionalParameter': !exists(json, 'optionalParameter') ? undefined : json['optionalParameter'],
        'documentId': !exists(json, 'documentId') ? undefined : json['documentId'],
        'cancellationUrl': !exists(json, 'cancellationUrl') ? undefined : json['cancellationUrl'],
        'amount': json['amount'],
        'amountWithTax': !exists(json, 'amountWithTax') ? undefined : json['amountWithTax'],
        'amountWithoutTax': !exists(json, 'amountWithoutTax') ? undefined : json['amountWithoutTax'],
        'manualTax': !exists(json, 'manualTax') ? undefined : json['manualTax'],
        'tax': !exists(json, 'tax') ? undefined : json['tax'],
        'service': !exists(json, 'service') ? undefined : json['service'],
        'tip': !exists(json, 'tip') ? undefined : json['tip'],
        'clientTransactionId': json['clientTransactionId'],
        'storeId': !exists(json, 'storeId') ? undefined : json['storeId'],
        'terminalId': !exists(json, 'terminalId') ? undefined : json['terminalId'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'order': !exists(json, 'order') ? undefined : PayPhoneButtonBusinessModelsOrderFromJSON(json['order']),
    };
}

export function PayPhoneButtonBusinessModelsPrepareSaleRequestModelToJSON(value?: PayPhoneButtonBusinessModelsPrepareSaleRequestModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'responseUrl': value.responseUrl,
        'transactionSummaryUrl': value.transactionSummaryUrl,
        'timeZone': value.timeZone,
        'lat': value.lat,
        'lng': value.lng,
        'lang': value.lang,
        'reference': value.reference,
        'phoneNumber': value.phoneNumber,
        'email': value.email,
        'optionalParameter': value.optionalParameter,
        'documentId': value.documentId,
        'cancellationUrl': value.cancellationUrl,
        'amount': value.amount,
        'amountWithTax': value.amountWithTax,
        'amountWithoutTax': value.amountWithoutTax,
        'manualTax': value.manualTax,
        'tax': value.tax,
        'service': value.service,
        'tip': value.tip,
        'clientTransactionId': value.clientTransactionId,
        'storeId': value.storeId,
        'terminalId': value.terminalId,
        'currency': value.currency,
        'order': PayPhoneButtonBusinessModelsOrderToJSON(value.order),
    };
}


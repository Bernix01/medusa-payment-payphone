/* tslint:disable */
/* eslint-disable */
/**
 * PayPhone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Cancellation model
 * @export
 * @interface PayPhoneButtonBusinessModelsCancellationModel
 */
export interface PayPhoneButtonBusinessModelsCancellationModel {
    /**
     * Cancellation identifier
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsCancellationModel
     */
    'id'?: number;
    /**
     * Status code of cancellation
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsCancellationModel
     */
    'statusCode'?: number;
    /**
     * Literal status of cancellation
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsCancellationModel
     */
    'status'?: string;
    /**
     * Client transaction id
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsCancellationModel
     */
    'clientTransactionId'?: string;
    /**
     * 
     * @type {PayPhoneButtonBusinessModelsSale}
     * @memberof PayPhoneButtonBusinessModelsCancellationModel
     */
    'sale'?: PayPhoneButtonBusinessModelsSale;
    /**
     * Message for this annul
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsCancellationModel
     */
    'message'?: string;
}
/**
 * Model for cancellation set
 * @export
 * @interface PayPhoneButtonBusinessModelsCancellationSetModel
 */
export interface PayPhoneButtonBusinessModelsCancellationSetModel {
    /**
     * Annul id for get transaction
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsCancellationSetModel
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsLineItem
 */
export interface PayPhoneButtonBusinessModelsLineItem {
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'productName'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'totalAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'taxAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'productSKU'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'productDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'shippingDestinationTypes'?: string;
    /**
     * 
     * @type {PayPhoneButtonBusinessModelsPassenger}
     * @memberof PayPhoneButtonBusinessModelsLineItem
     */
    'passenger'?: PayPhoneButtonBusinessModelsPassenger;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsOrder
 */
export interface PayPhoneButtonBusinessModelsOrder {
    /**
     * 
     * @type {PayPhoneISO8583ModelsPayPhoneBillTo}
     * @memberof PayPhoneButtonBusinessModelsOrder
     */
    'billTo'?: PayPhoneISO8583ModelsPayPhoneBillTo;
    /**
     * 
     * @type {Array<PayPhoneButtonBusinessModelsLineItem>}
     * @memberof PayPhoneButtonBusinessModelsOrder
     */
    'lineItems'?: Array<PayPhoneButtonBusinessModelsLineItem>;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsPassenger
 */
export interface PayPhoneButtonBusinessModelsPassenger {
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPassenger
     */
    'nationality'?: string;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsPrepareSaleModel
 */
export interface PayPhoneButtonBusinessModelsPrepareSaleModel {
    /**
     * Payment id generate
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleModel
     */
    'paymentId'?: string;
    /**
     * Url for redirect and pay with PayPhone
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleModel
     */
    'payWithPayPhone'?: string;
    /**
     * Url for redirect to PayPhone and pay only with your credit card
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleModel
     */
    'payWithCard'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleModel
     */
    'payWithPaymentCode'?: string;
}
/**
 * Model for accept the new sale request
 * @export
 * @interface PayPhoneButtonBusinessModelsPrepareSaleRequestModel
 */
export interface PayPhoneButtonBusinessModelsPrepareSaleRequestModel {
    /**
     * Response url for this transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'responseUrl': string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'transactionSummaryUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'timeZone'?: number;
    /**
     * Store Latitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'lat'?: string;
    /**
     * Store longitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'lng'?: string;
    /**
     * Language for this transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'lang'?: string;
    /**
     * Reference for this transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'reference'?: string;
    /**
     * User Phone number (optional)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'phoneNumber'?: string;
    /**
     * User email (optional)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'email'?: string;
    /**
     * Parameter opcional No 3 (Optional)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'optionalParameter'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'documentId'?: string;
    /**
     * Url execute when user click in cancel payment before complete the payment process
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'cancellationUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'amount': number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'amountWithTax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'amountWithoutTax'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'manualTax'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'tax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'service'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'tip'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'clientTransactionId': string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'storeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'terminalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'currency'?: string;
    /**
     * 
     * @type {PayPhoneButtonBusinessModelsOrder}
     * @memberof PayPhoneButtonBusinessModelsPrepareSaleRequestModel
     */
    'order'?: PayPhoneButtonBusinessModelsOrder;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsRegionModel
 */
export interface PayPhoneButtonBusinessModelsRegionModel {
    /**
     * Region name
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsRegionModel
     */
    'name'?: string;
    /**
     * Phone region prefix number
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsRegionModel
     */
    'prefixNumber'?: number;
    /**
     * ISO code like \"EC\"
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsRegionModel
     */
    'iso'?: string;
}
/**
 * Details of canceled sale
 * @export
 * @interface PayPhoneButtonBusinessModelsSale
 */
export interface PayPhoneButtonBusinessModelsSale {
    /**
     * Canceled sale id
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSale
     */
    'id'?: number;
    /**
     * Canceled sale status code
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSale
     */
    'statusCode'?: number;
    /**
     * Canceled sale literal status
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSale
     */
    'status'?: string;
    /**
     * Client transaction id
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSale
     */
    'clientTransactionId'?: string;
    /**
     * Message for the cancelled transaction
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSale
     */
    'message'?: string;
}
/**
 * Sale get model
 * @export
 * @interface PayPhoneButtonBusinessModelsSaleGetModel
 */
export interface PayPhoneButtonBusinessModelsSaleGetModel {
    /**
     * Customer email
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'email'?: string;
    /**
     * Card type
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'cardType'?: string;
    /**
     * External user identifier
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'clientUserId'?: string;
    /**
     * Processor that served the request
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'processor'?: string;
    /**
     * Card bin
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'bin'?: string;
    /**
     * Últimos dígitos de la tarjeta
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'lastDigits'?: string;
    /**
     * Deferred code
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'deferredCode'?: string;
    /**
     * Deferred message
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'deferredMessage'?: string;
    /**
     * Flag that indicate if the payment was deferred or not
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'deferred'?: boolean;
    /**
     * Card brand code Example (Visa 50)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'cardBrandCode'?: string;
    /**
     * Card brand
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'cardBrand'?: string;
    /**
     * Amount charged (Number)
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'amount'?: number;
    /**
     * Client transaction id
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'clientTransactionId'?: string;
    /**
     * Customer phone number
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'phoneNumber'?: string;
    /**
     * Transaction status code Example(1)
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'statusCode'?: number;
    /**
     * Transaction status Example(Canceled)
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'transactionStatus'?: string;
    /**
     * Authorization code emiting by bank, this field have value is transaction status was approved
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'authorizationCode'?: string;
    /**
     * Message for error
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'message'?: string;
    /**
     * Message code for the reason why transaction not approved
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'messageCode'?: number;
    /**
     * PayPhone transaction id
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'transactionId'?: number;
    /**
     * Customer Document id
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'document'?: string;
    /**
     * Taxes apply to current transaction
     * @type {Array<PayPhoneButtonBusinessModelsTaxModel>}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'taxes'?: Array<PayPhoneButtonBusinessModelsTaxModel>;
    /**
     * ISO code A of transaction currency
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'currency'?: string;
    /**
     * Optional parameter 1
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'optionalParameter1'?: string;
    /**
     * Optional parameter 2
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'optionalParameter2'?: string;
    /**
     * Optional parameter 3
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'optionalParameter3'?: string;
    /**
     * Optional parameter 4
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'optionalParameter4'?: string;
    /**
     * Store name
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'storeName'?: string;
    /**
     * Fecha en la que se realizo la transacción
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'date'?: string;
    /**
     * ISO code de la region de la tienda que recibió el pago
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'regionIso'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'transactionType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'recap'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'reference'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModel
     */
    'canBypassRedirection'?: boolean;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsSaleGetModelB
 */
export interface PayPhoneButtonBusinessModelsSaleGetModelB {
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'cardType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'clientUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'processor'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'bin'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'lastDigits'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'deferredCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'deferredMessage'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'deferred'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'cardBrandCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'cardBrand'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'clientTransactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'transactionStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'authorizationCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'messageCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'transactionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'document'?: string;
    /**
     * 
     * @type {Array<PayPhoneButtonBusinessModelsTaxModel>}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'taxes'?: Array<PayPhoneButtonBusinessModelsTaxModel>;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'optionalParameter1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'optionalParameter2'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'optionalParameter3'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'optionalParameter4'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'storeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'regionIso'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'transactionType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'recap'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsSaleGetModelB
     */
    'reference'?: string;
}
/**
 * Sale model to response
 * @export
 * @interface PayPhoneButtonBusinessModelsSaleModel
 */
export interface PayPhoneButtonBusinessModelsSaleModel {
    /**
     * Identifier for current created transaction
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsSaleModel
     */
    'transactionId'?: number;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsTaxModel
 */
export interface PayPhoneButtonBusinessModelsTaxModel {
    /**
     * Tax name
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsTaxModel
     */
    'name'?: string;
    /**
     * Tax amount charged the sum of value and tax field
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsTaxModel
     */
    'amount'?: number;
    /**
     * Tax value
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsTaxModel
     */
    'value'?: number;
    /**
     * Tax apply for current tax
     * @type {number}
     * @memberof PayPhoneButtonBusinessModelsTaxModel
     */
    'tax'?: number;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessModelsUserModel
 */
export interface PayPhoneButtonBusinessModelsUserModel {
    /**
     * User Document id
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsUserModel
     */
    'documentId'?: string;
    /**
     * User name
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsUserModel
     */
    'name'?: string;
    /**
     * User last name
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsUserModel
     */
    'lastName'?: string;
    /**
     * User email
     * @type {string}
     * @memberof PayPhoneButtonBusinessModelsUserModel
     */
    'email'?: string;
    /**
     * User phone numbers
     * @type {Array<string>}
     * @memberof PayPhoneButtonBusinessModelsUserModel
     */
    'phoneNumbers'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PayPhoneButtonBusinessViewModelsSaleRequestModel
 */
export interface PayPhoneButtonBusinessViewModelsSaleRequestModel {
    /**
     * The user nickname optional if ChargeByNickName is false
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'nickName'?: string;
    /**
     * If true the user find by nickname. Note the nickname in this case is required
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'chargeByNickName'?: boolean;
    /**
     * User phone number optional if ChargeByNickName is true
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'phoneNumber'?: string;
    /**
     * phone country code
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'countryCode': string;
    /**
     * Store time zone
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'timeZone'?: number;
    /**
     * Store Latitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'lat'?: string;
    /**
     * Store longitude
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'lng'?: string;
    /**
     * (Optional) Identifier of the user generated in the client application
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'clientUserId'?: string;
    /**
     * (Optional) Field to send a reference of your purchase
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'reference'?: string;
    /**
     * Optional parameter 1
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'optionalParameter1'?: string;
    /**
     * Optional parameter 2
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'optionalParameter2'?: string;
    /**
     * Optional parameter 3
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'optionalParameter3'?: string;
    /**
     * (Optional) Deferred type example CF02010900
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'deferredType'?: string;
    /**
     * Response Url where our server send the payment result
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'responseUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'maxiDolar'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'amount': number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'amountWithTax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'amountWithoutTax'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'manualTax'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'tax'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'service'?: number;
    /**
     * 
     * @type {number}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'tip'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'clientTransactionId': string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'storeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'terminalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'currency'?: string;
    /**
     * 
     * @type {PayPhoneButtonBusinessModelsOrder}
     * @memberof PayPhoneButtonBusinessViewModelsSaleRequestModel
     */
    'order'?: PayPhoneButtonBusinessModelsOrder;
}
/**
 * 
 * @export
 * @interface PayPhoneISO8583ModelsPayPhoneBillTo
 */
export interface PayPhoneISO8583ModelsPayPhoneBillTo {
    /**
     * 
     * @type {number}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'billToId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'address1'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'locality'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'customerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayPhoneISO8583ModelsPayPhoneBillTo
     */
    'ipAddress'?: string;
}
/**
 * 
 * @export
 * @interface PayPhonePaymentButtonModelsCancellationSetByClientRequestModel
 */
export interface PayPhonePaymentButtonModelsCancellationSetByClientRequestModel {
    /**
     * Client transaction id
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsCancellationSetByClientRequestModel
     */
    'clientId': string;
}
/**
 * Request annul model
 * @export
 * @interface PayPhonePaymentButtonModelsCancellationSetRequestModel
 */
export interface PayPhonePaymentButtonModelsCancellationSetRequestModel {
    /**
     * Transaction id of sale to annul
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsCancellationSetRequestModel
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PayPhonePaymentButtonModelsConfirmSaleRequestModel
 */
export interface PayPhonePaymentButtonModelsConfirmSaleRequestModel {
    /**
     * Gets or sets the identifier.
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsConfirmSaleRequestModel
     */
    'id'?: number;
    /**
     * Gets or sets the client tx identifier.
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsConfirmSaleRequestModel
     */
    'clientTxId'?: string;
}
/**
 * 
 * @export
 * @interface PayPhonePaymentButtonModelsLinkViewModel
 */
export interface PayPhonePaymentButtonModelsLinkViewModel {
    /**
     * Transaction amount
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'amount': number;
    /**
     * Transaction tax
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'tax'?: number;
    /**
     * Transaction amount with tax
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'amountWithTax'?: number;
    /**
     * Trasnaction amount without tax
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'amountWithoutTax'?: number;
    /**
     * Service amount
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'service'?: number;
    /**
     * Tip amount
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'tip'?: number;
    /**
     * Currency to charge in ISO 4217 (USD)
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'currency': string;
    /**
     * Reference describing the transaction MAX(50 characters)
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'reference'?: string;
    /**
     * Transaction identifier Max(50)
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'clientTransactionId': string;
    /**
     * Store identifier. It can be found in the developer\'s console
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'storeId'?: string;
    /**
     * (Optional) Additional parameters, accept a json
     * @type {string}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'additionalData'?: string;
    /**
     * The link only can pay one time, the pay must be approved
     * @type {boolean}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'oneTime'?: boolean;
    /**
     * When the link is no longer available in hours
     * @type {number}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'expireIn'?: number;
    /**
     * Si aplica monto editable
     * @type {boolean}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'isAmountEditable'?: boolean;
    /**
     * Si es masivo o no
     * @type {boolean}
     * @memberof PayPhonePaymentButtonModelsLinkViewModel
     */
    'isMassive'?: boolean;
}

/**
 * AnnulApi - axios parameter creator
 * @export
 */
export const AnnulApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET: the annul by his id
         * @param {number} id Annul id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('annulGet', 'id', id)
            const localVarPath = `/api/Annul/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: the annul by client transaction id
         * @param {string} clientId Client transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulGetByClientId: async (clientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('annulGetByClientId', 'clientId', clientId)
            const localVarPath = `/api/Annul/client/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: Request a cancellation for the transaction with specified id
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulSet: async (model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('annulSet', 'model', model)
            const localVarPath = `/api/Annul`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: Request a cancellation for the transaction with specified client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulSetByClientId: async (model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('annulSetByClientId', 'model', model)
            const localVarPath = `/api/Annul/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnulApi - functional programming interface
 * @export
 */
export const AnnulApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnulApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET: the annul by his id
         * @param {number} id Annul id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annulGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsCancellationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annulGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AnnulApi.annulGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GET: the annul by client transaction id
         * @param {string} clientId Client transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annulGetByClientId(clientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsCancellationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annulGetByClientId(clientId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AnnulApi.annulGetByClientId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary POST: Request a cancellation for the transaction with specified id
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annulSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsCancellationSetModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annulSet(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AnnulApi.annulSet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary POST: Request a cancellation for the transaction with specified client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annulSetByClientId(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsCancellationSetModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annulSetByClientId(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AnnulApi.annulSetByClientId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AnnulApi - factory interface
 * @export
 */
export const AnnulApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnulApiFp(configuration)
    return {
        /**
         * 
         * @summary GET: the annul by his id
         * @param {number} id Annul id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulGet(id: number, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsCancellationModel> {
            return localVarFp.annulGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: the annul by client transaction id
         * @param {string} clientId Client transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulGetByClientId(clientId: string, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsCancellationModel> {
            return localVarFp.annulGetByClientId(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: Request a cancellation for the transaction with specified id
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsCancellationSetModel> {
            return localVarFp.annulSet(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: Request a cancellation for the transaction with specified client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annulSetByClientId(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsCancellationSetModel> {
            return localVarFp.annulSetByClientId(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnulApi - object-oriented interface
 * @export
 * @class AnnulApi
 * @extends {BaseAPI}
 */
export class AnnulApi extends BaseAPI {
    /**
     * 
     * @summary GET: the annul by his id
     * @param {number} id Annul id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnulApi
     */
    public annulGet(id: number, options?: RawAxiosRequestConfig) {
        return AnnulApiFp(this.configuration).annulGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: the annul by client transaction id
     * @param {string} clientId Client transaction id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnulApi
     */
    public annulGetByClientId(clientId: string, options?: RawAxiosRequestConfig) {
        return AnnulApiFp(this.configuration).annulGetByClientId(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: Request a cancellation for the transaction with specified id
     * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnulApi
     */
    public annulSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: RawAxiosRequestConfig) {
        return AnnulApiFp(this.configuration).annulSet(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: Request a cancellation for the transaction with specified client transaction id
     * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnulApi
     */
    public annulSetByClientId(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: RawAxiosRequestConfig) {
        return AnnulApiFp(this.configuration).annulSetByClientId(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ButtonApi - axios parameter creator
 * @export
 */
export const ButtonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Post: Confirm the transaction receive from payment button
         * @param {PayPhonePaymentButtonModelsConfirmSaleRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buttonConfirmV2: async (model: PayPhonePaymentButtonModelsConfirmSaleRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('buttonConfirmV2', 'model', model)
            const localVarPath = `/api/button/V2/Confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: Prepare the transaction for consume later by payment button
         * @param {PayPhoneButtonBusinessModelsPrepareSaleRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buttonPrepare: async (model: PayPhoneButtonBusinessModelsPrepareSaleRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('buttonPrepare', 'model', model)
            const localVarPath = `/api/button/Prepare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ButtonApi - functional programming interface
 * @export
 */
export const ButtonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ButtonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Post: Confirm the transaction receive from payment button
         * @param {PayPhonePaymentButtonModelsConfirmSaleRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buttonConfirmV2(model: PayPhonePaymentButtonModelsConfirmSaleRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsSaleGetModelB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buttonConfirmV2(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ButtonApi.buttonConfirmV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary POST: Prepare the transaction for consume later by payment button
         * @param {PayPhoneButtonBusinessModelsPrepareSaleRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buttonPrepare(model: PayPhoneButtonBusinessModelsPrepareSaleRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsPrepareSaleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buttonPrepare(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ButtonApi.buttonPrepare']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ButtonApi - factory interface
 * @export
 */
export const ButtonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ButtonApiFp(configuration)
    return {
        /**
         * 
         * @summary Post: Confirm the transaction receive from payment button
         * @param {PayPhonePaymentButtonModelsConfirmSaleRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buttonConfirmV2(model: PayPhonePaymentButtonModelsConfirmSaleRequestModel, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsSaleGetModelB> {
            return localVarFp.buttonConfirmV2(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: Prepare the transaction for consume later by payment button
         * @param {PayPhoneButtonBusinessModelsPrepareSaleRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buttonPrepare(model: PayPhoneButtonBusinessModelsPrepareSaleRequestModel, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsPrepareSaleModel> {
            return localVarFp.buttonPrepare(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ButtonApi - object-oriented interface
 * @export
 * @class ButtonApi
 * @extends {BaseAPI}
 */
export class ButtonApi extends BaseAPI {
    /**
     * 
     * @summary Post: Confirm the transaction receive from payment button
     * @param {PayPhonePaymentButtonModelsConfirmSaleRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ButtonApi
     */
    public buttonConfirmV2(model: PayPhonePaymentButtonModelsConfirmSaleRequestModel, options?: RawAxiosRequestConfig) {
        return ButtonApiFp(this.configuration).buttonConfirmV2(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: Prepare the transaction for consume later by payment button
     * @param {PayPhoneButtonBusinessModelsPrepareSaleRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ButtonApi
     */
    public buttonPrepare(model: PayPhoneButtonBusinessModelsPrepareSaleRequestModel, options?: RawAxiosRequestConfig) {
        return ButtonApiFp(this.configuration).buttonPrepare(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CancelApi - axios parameter creator
 * @export
 */
export const CancelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST: Request cancel transaction
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSet: async (model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('cancelSet', 'model', model)
            const localVarPath = `/api/Cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: Request cancel transaction by client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSetByClient: async (model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('cancelSetByClient', 'model', model)
            const localVarPath = `/api/Cancel/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CancelApi - functional programming interface
 * @export
 */
export const CancelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CancelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST: Request cancel transaction
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSet(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CancelApi.cancelSet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary POST: Request cancel transaction by client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSetByClient(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSetByClient(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CancelApi.cancelSetByClient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CancelApi - factory interface
 * @export
 */
export const CancelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CancelApiFp(configuration)
    return {
        /**
         * 
         * @summary POST: Request cancel transaction
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: any): AxiosPromise<boolean> {
            return localVarFp.cancelSet(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: Request cancel transaction by client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSetByClient(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: any): AxiosPromise<boolean> {
            return localVarFp.cancelSetByClient(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CancelApi - object-oriented interface
 * @export
 * @class CancelApi
 * @extends {BaseAPI}
 */
export class CancelApi extends BaseAPI {
    /**
     * 
     * @summary POST: Request cancel transaction
     * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancelApi
     */
    public cancelSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: RawAxiosRequestConfig) {
        return CancelApiFp(this.configuration).cancelSet(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: Request cancel transaction by client transaction id
     * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CancelApi
     */
    public cancelSetByClient(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: RawAxiosRequestConfig) {
        return CancelApiFp(this.configuration).cancelSetByClient(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LinksApi - axios parameter creator
 * @export
 */
export const LinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Request a pay link with specific amount
         * @param {PayPhonePaymentButtonModelsLinkViewModel} model Parameters for request a new link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksPost: async (model: PayPhonePaymentButtonModelsLinkViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('linksPost', 'model', model)
            const localVarPath = `/api/Links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinksApi - functional programming interface
 * @export
 */
export const LinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Request a pay link with specific amount
         * @param {PayPhonePaymentButtonModelsLinkViewModel} model Parameters for request a new link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linksPost(model: PayPhonePaymentButtonModelsLinkViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linksPost(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LinksApi.linksPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LinksApi - factory interface
 * @export
 */
export const LinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinksApiFp(configuration)
    return {
        /**
         * 
         * @summary Request a pay link with specific amount
         * @param {PayPhonePaymentButtonModelsLinkViewModel} model Parameters for request a new link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksPost(model: PayPhonePaymentButtonModelsLinkViewModel, options?: any): AxiosPromise<string> {
            return localVarFp.linksPost(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LinksApi - object-oriented interface
 * @export
 * @class LinksApi
 * @extends {BaseAPI}
 */
export class LinksApi extends BaseAPI {
    /**
     * 
     * @summary Request a pay link with specific amount
     * @param {PayPhonePaymentButtonModelsLinkViewModel} model Parameters for request a new link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    public linksPost(model: PayPhonePaymentButtonModelsLinkViewModel, options?: RawAxiosRequestConfig) {
        return LinksApiFp(this.configuration).linksPost(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RegionsApi - axios parameter creator
 * @export
 */
export const RegionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET: available regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegionsApi - functional programming interface
 * @export
 */
export const RegionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET: available regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayPhoneButtonBusinessModelsRegionModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regionsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RegionsApi.regionsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * RegionsApi - factory interface
 * @export
 */
export const RegionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegionsApiFp(configuration)
    return {
        /**
         * 
         * @summary GET: available regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsGet(options?: any): AxiosPromise<Array<PayPhoneButtonBusinessModelsRegionModel>> {
            return localVarFp.regionsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegionsApi - object-oriented interface
 * @export
 * @class RegionsApi
 * @extends {BaseAPI}
 */
export class RegionsApi extends BaseAPI {
    /**
     * 
     * @summary GET: available regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    public regionsGet(options?: RawAxiosRequestConfig) {
        return RegionsApiFp(this.configuration).regionsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReverseApi - axios parameter creator
 * @export
 */
export const ReverseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST: Reverse transaction
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseSet: async (model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('reverseSet', 'model', model)
            const localVarPath = `/api/Reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: Reverse transaction by client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseSetByClientId: async (model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('reverseSetByClientId', 'model', model)
            const localVarPath = `/api/Reverse/Client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReverseApi - functional programming interface
 * @export
 */
export const ReverseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReverseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST: Reverse transaction
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reverseSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reverseSet(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReverseApi.reverseSet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary POST: Reverse transaction by client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reverseSetByClientId(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reverseSetByClientId(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReverseApi.reverseSetByClientId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ReverseApi - factory interface
 * @export
 */
export const ReverseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReverseApiFp(configuration)
    return {
        /**
         * 
         * @summary POST: Reverse transaction
         * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: any): AxiosPromise<boolean> {
            return localVarFp.reverseSet(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: Reverse transaction by client transaction id
         * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseSetByClientId(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: any): AxiosPromise<boolean> {
            return localVarFp.reverseSetByClientId(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReverseApi - object-oriented interface
 * @export
 * @class ReverseApi
 * @extends {BaseAPI}
 */
export class ReverseApi extends BaseAPI {
    /**
     * 
     * @summary POST: Reverse transaction
     * @param {PayPhonePaymentButtonModelsCancellationSetRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReverseApi
     */
    public reverseSet(model: PayPhonePaymentButtonModelsCancellationSetRequestModel, options?: RawAxiosRequestConfig) {
        return ReverseApiFp(this.configuration).reverseSet(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: Reverse transaction by client transaction id
     * @param {PayPhonePaymentButtonModelsCancellationSetByClientRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.PaymentButton.Models.CancellationSetByClientRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReverseApi
     */
    public reverseSetByClientId(model: PayPhonePaymentButtonModelsCancellationSetByClientRequestModel, options?: RawAxiosRequestConfig) {
        return ReverseApiFp(this.configuration).reverseSetByClientId(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SaleApi - axios parameter creator
 * @export
 */
export const SaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get transaction by id
         * @param {number} id Transaction identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saleGet', 'id', id)
            const localVarPath = `/api/Sale/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get transaction by client transaction id
         * @param {string} clientId Client transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleGetByClient: async (clientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('saleGetByClient', 'clientId', clientId)
            const localVarPath = `/api/Sale/client/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create transaction and send notification to customer
         * @param {PayPhoneButtonBusinessViewModelsSaleRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.Button.Business.ViewModels.SaleRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleSet: async (model: PayPhoneButtonBusinessViewModelsSaleRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('saleSet', 'model', model)
            const localVarPath = `/api/Sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaleApi - functional programming interface
 * @export
 */
export const SaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get transaction by id
         * @param {number} id Transaction identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsSaleGetModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SaleApi.saleGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get transaction by client transaction id
         * @param {string} clientId Client transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleGetByClient(clientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayPhoneButtonBusinessModelsSaleGetModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleGetByClient(clientId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SaleApi.saleGetByClient']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create transaction and send notification to customer
         * @param {PayPhoneButtonBusinessViewModelsSaleRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.Button.Business.ViewModels.SaleRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saleSet(model: PayPhoneButtonBusinessViewModelsSaleRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsSaleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saleSet(model, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SaleApi.saleSet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SaleApi - factory interface
 * @export
 */
export const SaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaleApiFp(configuration)
    return {
        /**
         * 
         * @summary Get transaction by id
         * @param {number} id Transaction identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleGet(id: number, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsSaleGetModel> {
            return localVarFp.saleGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get transaction by client transaction id
         * @param {string} clientId Client transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleGetByClient(clientId: string, options?: any): AxiosPromise<Array<PayPhoneButtonBusinessModelsSaleGetModel>> {
            return localVarFp.saleGetByClient(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create transaction and send notification to customer
         * @param {PayPhoneButtonBusinessViewModelsSaleRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.Button.Business.ViewModels.SaleRequestModel\&quot; /&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saleSet(model: PayPhoneButtonBusinessViewModelsSaleRequestModel, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsSaleModel> {
            return localVarFp.saleSet(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaleApi - object-oriented interface
 * @export
 * @class SaleApi
 * @extends {BaseAPI}
 */
export class SaleApi extends BaseAPI {
    /**
     * 
     * @summary Get transaction by id
     * @param {number} id Transaction identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public saleGet(id: number, options?: RawAxiosRequestConfig) {
        return SaleApiFp(this.configuration).saleGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get transaction by client transaction id
     * @param {string} clientId Client transaction id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public saleGetByClient(clientId: string, options?: RawAxiosRequestConfig) {
        return SaleApiFp(this.configuration).saleGetByClient(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create transaction and send notification to customer
     * @param {PayPhoneButtonBusinessViewModelsSaleRequestModel} model &lt;seealso cref&#x3D;\&quot;T:PayPhone.Button.Business.ViewModels.SaleRequestModel\&quot; /&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApi
     */
    public saleSet(model: PayPhoneButtonBusinessViewModelsSaleRequestModel, options?: RawAxiosRequestConfig) {
        return SaleApiFp(this.configuration).saleSet(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check active users
         * @param {string} number Phone number
         * @param {number} prefix Country code prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCheckUser: async (number: string, prefix: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('usersCheckUser', 'number', number)
            // verify required parameter 'prefix' is not null or undefined
            assertParamExists('usersCheckUser', 'prefix', prefix)
            const localVarPath = `/api/Users/check/{number}/region/{prefix}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)))
                .replace(`{${"prefix"}}`, encodeURIComponent(String(prefix)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by phone number
         * @param {string} number Phone number
         * @param {number} prefix Country code prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (number: string, prefix: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('usersGet', 'number', number)
            // verify required parameter 'prefix' is not null or undefined
            assertParamExists('usersGet', 'prefix', prefix)
            const localVarPath = `/api/Users/{number}/region/{prefix}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)))
                .replace(`{${"prefix"}}`, encodeURIComponent(String(prefix)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by nickname
         * @param {string} number Nickname
         * @param {number} prefix Country phone prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetByNickname: async (number: string, prefix: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('usersGetByNickname', 'number', number)
            // verify required parameter 'prefix' is not null or undefined
            assertParamExists('usersGetByNickname', 'prefix', prefix)
            const localVarPath = `/api/Users/nickname/{number}/region/{prefix}`
                .replace(`{${"number"}}`, encodeURIComponent(String(number)))
                .replace(`{${"prefix"}}`, encodeURIComponent(String(prefix)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check active users
         * @param {string} number Phone number
         * @param {number} prefix Country code prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCheckUser(number: string, prefix: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCheckUser(number, prefix, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersCheckUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get user by phone number
         * @param {string} number Phone number
         * @param {number} prefix Country code prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(number: string, prefix: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsUserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(number, prefix, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get user by nickname
         * @param {string} number Nickname
         * @param {number} prefix Country phone prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGetByNickname(number: string, prefix: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPhoneButtonBusinessModelsUserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetByNickname(number, prefix, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersGetByNickname']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Check active users
         * @param {string} number Phone number
         * @param {number} prefix Country code prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCheckUser(number: string, prefix: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.usersCheckUser(number, prefix, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by phone number
         * @param {string} number Phone number
         * @param {number} prefix Country code prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(number: string, prefix: number, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsUserModel> {
            return localVarFp.usersGet(number, prefix, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by nickname
         * @param {string} number Nickname
         * @param {number} prefix Country phone prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGetByNickname(number: string, prefix: number, options?: any): AxiosPromise<PayPhoneButtonBusinessModelsUserModel> {
            return localVarFp.usersGetByNickname(number, prefix, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Check active users
     * @param {string} number Phone number
     * @param {number} prefix Country code prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCheckUser(number: string, prefix: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCheckUser(number, prefix, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by phone number
     * @param {string} number Phone number
     * @param {number} prefix Country code prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(number: string, prefix: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(number, prefix, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by nickname
     * @param {string} number Nickname
     * @param {number} prefix Country phone prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGetByNickname(number: string, prefix: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGetByNickname(number, prefix, options).then((request) => request(this.axios, this.basePath));
    }
}



